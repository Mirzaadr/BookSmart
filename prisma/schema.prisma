generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id(map: "users_id_unique") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullName         String         @map("full_name")
  email            String         @unique
  universityId     Int            @unique(map: "users_university_id_unique") @map("university_id")
  password         String
  universityCard   String         @map("university_card")
  status           Status?        @default(PENDING)
  role             Role?          @default(USER)
  lastActivityDate DateTime?      @default(now()) @map("last_activity_date")
  borrowRecords    BorrowRecord[]

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("users")
}

model Book {
  id              String         @id(map: "books_id_unique") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String         @db.VarChar(255)
  author          String         @db.VarChar(255)
  genre           String
  rating          Int
  coverUrl        String         @map("cover_url")
  coverColor      String         @map("cover_color") @db.VarChar(7)
  description     String
  totalCopies     Int            @default(1) @map("total_copies")
  availableCopies Int            @default(0) @map("available_copies")
  videoUrl        String         @map("video_url")
  summary         String         @db.VarChar
  createdAt       DateTime?      @default(now()) @map("created_at")
  updatedAt       DateTime?      @updatedAt @map("updated_at")
  borrowRecords   BorrowRecord[]

  @@map("books")
}

model BorrowRecord {
  id         String       @id(map: "borrow_records_id_unique") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String       @map("user_id") @db.Uuid
  bookId     String       @map("book_id") @db.Uuid
  borrowDate DateTime     @default(now()) @map("borrow_date")
  dueDate    DateTime     @map("due_date") @db.Date
  returnDate DateTime?    @map("return_date") @db.Date
  status     BorrowStatus @default(BORROWED)
  createdAt  DateTime?    @default(now()) @map("created_at")
  updatedAt  DateTime?    @updatedAt @map("updated_at")
  books      Book         @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "borrow_records_book_id_books_id_fk")
  users      User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "borrow_records_user_id_users_id_fk")

  @@map("borrow_records")
}

enum BorrowStatus {
  BORROWED
  RETURNED

  @@map("borrow_status")
}

enum Role {
  USER
  ADMIN

  @@map("role")
}

enum Status {
  PENDING
  APPROVED
  REJECTED

  @@map("status")
}
