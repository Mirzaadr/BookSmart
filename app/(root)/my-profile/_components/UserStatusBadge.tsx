const UserStatusBadge = ({
  isApproved,
  className,
}: {
  isApproved: boolean;
  className: React.SVGAttributes<SVGSVGElement>["className"];
}) => {
  return isApproved ? (
    <BadgeCheckSvg className={className} title="User has been approved" />
  ) : (
    <BadgeAlertSvg
      className={className}
      fill="#b91c1c"
      title="User has not been approved"
    />
  );
};

export default UserStatusBadge;

const BadgeCheckSvg = ({
  title,
  ...props
}: React.SVGAttributes<SVGSVGElement> & { title?: string }) => {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <title>{title || "Badge Check"}</title>
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M2.77246 8.17195C2.72111 7.56117 2.78235 6.94417 2.95516 6.35212C3.19104 5.54399 3.62715 4.8085 4.22305 4.21385C4.81895 3.6192 5.55535 3.18463 6.36397 2.95044C6.95693 2.77871 7.57464 2.71881 8.18586 2.77169C8.58094 2.30561 9.05939 1.9144 9.59864 1.61914C10.3348 1.21604 11.1606 1.00476 11.9999 1.00476C12.8393 1.00476 13.6651 1.21604 14.4013 1.61914C14.9404 1.91433 15.4187 2.30544 15.8138 2.77139C16.4262 2.71808 17.0452 2.77801 17.6393 2.95022C18.4493 3.18498 19.1866 3.62076 19.7829 4.21702C20.3792 4.81329 20.8149 5.55067 21.0497 6.36058C21.2219 6.95471 21.2818 7.57371 21.2285 8.18615C21.6945 8.58118 22.0856 9.05953 22.3808 9.59866C22.7839 10.3348 22.9952 11.1607 22.9952 12C22.9952 12.8393 22.7839 13.6651 22.3808 14.4013C22.0855 14.9405 21.6943 15.419 21.2282 15.8141C21.2811 16.4253 21.2212 17.043 21.0495 17.636C20.8153 18.4446 20.3807 19.181 19.7861 19.7769C19.1914 20.3728 18.4559 20.8089 17.6478 21.0448C17.0553 21.2177 16.4377 21.2789 15.8264 21.2273C15.4312 21.6958 14.9519 22.0891 14.4114 22.3859C13.6739 22.7908 12.8462 23.003 12.0049 23.003C11.1637 23.003 10.336 22.7908 9.59854 22.3859C9.05836 22.0893 8.5794 21.6964 8.18434 21.2284C7.57361 21.281 6.95644 21.2211 6.36397 21.0495C5.55535 20.8153 4.81895 20.3808 4.22305 19.7861C3.62715 19.1914 3.19104 18.456 2.95516 17.6478C2.78235 17.0558 2.72111 16.4388 2.77246 15.828C2.30212 15.4328 1.90714 14.953 1.60899 14.4115C1.20229 13.6728 0.989014 12.8432 0.989014 12C0.989014 11.1567 1.20229 10.3272 1.60899 9.58846C1.90714 9.04694 2.30213 8.56716 2.77246 8.17195ZM16.6705 10.9916C17.1098 10.536 17.1098 9.79732 16.6705 9.34171C16.2312 8.8861 15.5188 8.8861 15.0795 9.34171L11.375 13.1834L9.9205 11.675C9.48116 11.2194 8.76884 11.2194 8.3295 11.675C7.89016 12.1307 7.89016 12.8693 8.3295 13.325L10.5795 15.6583C11.0188 16.1139 11.7312 16.1139 12.1705 15.6583L16.6705 10.9916Z"
        fill={props.fill || "currentColor"}
      />
    </svg>
  );
};

const BadgeAlertSvg = ({
  title,
  ...props
}: React.SVGAttributes<SVGSVGElement> & { title?: string }) => {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <title>{title || "Badge Check"}</title>
      <path
        fill-rule="evenodd"
        clip-rule="evenodd"
        d="M2.77246 8.17195C2.72111 7.56117 2.78235 6.94417 2.95516 6.35212C3.19104 5.54399 3.62715 4.8085 4.22305 4.21385C4.81895 3.6192 5.55535 3.18463 6.36397 2.95044C6.95693 2.77871 7.57464 2.71881 8.18586 2.77169C8.58094 2.30561 9.05939 1.9144 9.59864 1.61914C10.3348 1.21604 11.1606 1.00476 11.9999 1.00476C12.8393 1.00476 13.6651 1.21604 14.4013 1.61914C14.9404 1.91433 15.4187 2.30544 15.8138 2.77139C16.4262 2.71808 17.0452 2.77801 17.6393 2.95022C18.4493 3.18498 19.1866 3.62076 19.7829 4.21702C20.3792 4.81329 20.8149 5.55067 21.0497 6.36058C21.2219 6.95471 21.2818 7.57371 21.2285 8.18615C21.6945 8.58118 22.0856 9.05953 22.3808 9.59866C22.7839 10.3348 22.9952 11.1607 22.9952 12C22.9952 12.8393 22.7839 13.6651 22.3808 14.4013C22.0855 14.9405 21.6943 15.419 21.2282 15.8141C21.2811 16.4253 21.2212 17.043 21.0495 17.636C20.8153 18.4446 20.3807 19.181 19.7861 19.7769C19.1914 20.3728 18.4559 20.8089 17.6478 21.0448C17.0553 21.2177 16.4377 21.2789 15.8264 21.2273C15.4312 21.6958 14.9519 22.0891 14.4114 22.3859C13.6739 22.7908 12.8462 23.003 12.0049 23.003C11.1637 23.003 10.336 22.7908 9.59854 22.3859C9.05836 22.0893 8.5794 21.6964 8.18434 21.2284C7.57361 21.281 6.95644 21.2211 6.36397 21.0495C5.55535 20.8153 4.81895 20.3808 4.22305 19.7861C3.62715 19.1914 3.19104 18.456 2.95516 17.6478C2.78235 17.0558 2.72111 16.4388 2.77246 15.828C2.30212 15.4328 1.90714 14.953 1.60899 14.4115C1.20229 13.6728 0.989014 12.8432 0.989014 12C0.989014 11.1567 1.20229 10.3272 1.60899 9.58846C1.90714 9.04694 2.30213 8.56716 2.77246 8.17195ZM16.6705 10.9916C17.1098 10.536 17.1098 9.79732 16.6705 9.34171C16.2312 8.8861 15.5188 8.8861 15.0795 9.34171L11.375 13.1834L9.9205 11.675C9.48116 11.2194 8.76884 11.2194 8.3295 11.675C7.89016 12.1307 7.89016 12.8693 8.3295 13.325L10.5795 15.6583C11.0188 16.1139 11.7312 16.1139 12.1705 15.6583L16.6705 10.9916Z"
        fill={props.fill || "currentColor"}
      />
    </svg>
  );
};
